Detailed project UML sequence diagram text. For a full visual of the UML interaction diagram paste this text into
www.sequencediagram.org


actor Client
participant Server
participant UserHandler
participant GameHandler
participant ClearHandler

participant UserService
participant AuthService
participant GameService
participant ClearDbService

participant userDAO
participant authDAO
participant gameDAO

database db

-------------------- Registration -----------------------

group #lightblue Registration #black
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> UserHandler: {"username":" ", "password":" ", "email":" "}
UserHandler -> UserService: registerUser(RegisterRequest)

UserService -> UserService: check registerRequest.username()\ncheck registerRequest.password()\ncheck registerRequest.email()

break Missing user data
UserService -> Server: BadRequestException
Server -> Client: 400\n{"message": "Missing Data in Request"}
end

UserService -> userDAO: getUser(registerRequest.username())
userDAO -> db: Find UserData by username

break User already exists
userDAO --> UserService: UserData
UserService -> Server: UsernameTakenException
Server -> Client: 403\n{"message": "User already exists"}
end

userDAO --> UserService: null

UserService -> userDAO: createUser(UserData)
userDAO -> db: Add UserData

UserService -> AuthService: generateAuth()
AuthService -> AuthService: UUID.randomUUID()
AuthService -> userDAO: tokenAlreadyExists(authToken)
userDAO -> db: Check token uniqueness
userDAO --> AuthService: false
AuthService --> UserService: authToken

UserService -> AuthService: createAuth(AuthData)
AuthService -> db: Add AuthData

UserService --> UserHandler: RegisterResponse(username, authToken)
UserHandler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

-------------------- Login -----------------------

group #lightgreen Login #black
Client -> Server: [POST] /session\n{"username":" ", "password":" "}
Server -> UserHandler: {"username":" ", "password":" "}
UserHandler -> UserService: loginUser(LoginRequest)

UserService -> UserService: check loginRequest.username()\ncheck loginRequest.password()

break Missing credentials
UserService -> Server: BadRequestException
Server -> Client: 400\n{"message": "Must enter username and password"}
end

UserService -> userDAO: getUser(loginRequest.username())
userDAO -> db: Find UserData by username

break User not found
userDAO --> UserService: null
UserService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "Username or password is incorrect"}
end

userDAO --> UserService: UserData
UserService -> UserService: comparePasswords()

break Invalid password
UserService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "Username or password is incorrect"}
end

UserService -> AuthService: generateAuth()
AuthService -> AuthService: UUID.randomUUID()
AuthService -> userDAO: tokenAlreadyExists(authToken)
userDAO -> db: Check token uniqueness
userDAO --> AuthService: false
AuthService --> UserService: authToken

UserService -> AuthService: createAuth(AuthData)
AuthService -> db: Add AuthData

UserService --> UserHandler: LoginResponse(username, authToken)
UserHandler --> Server: {"username":" ", "authToken":" "}
Server --> Client: 200\n{"username":" ", "authToken":" "}
end

-------------------- Logout -----------------------

group #coral Logout #black
Client -> Server: [DELETE] /session\nAuthorization: <authToken>
Server -> UserHandler: Authorization: <authToken>
UserHandler -> UserService: logoutUser(LogoutRequest)

UserService -> AuthService: getAuth(authToken)
AuthService -> db: Find AuthData by authToken

break Invalid token
AuthService --> UserService: null
UserService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "Invalid Auth Token"}
end

UserService -> AuthService: deleteAuth(authToken)
AuthService -> db: Delete AuthData

UserService --> UserHandler: LogoutResponse()
UserHandler --> Server: {}
Server --> Client: 200\n{}
end

-------------------- CreateGame -----------------------

group #violet CreateGame #black
Client -> Server: [POST] /game\nAuthorization: <authToken>\n{"gameName":" "}
Server -> GameHandler: Authorization + body
GameHandler -> GameService: createGame(CreateGameRequest)

GameService -> GameService: check createGameRequest.gameName()

break Missing game name
GameService -> Server: BadRequestException
Server -> Client: 400\n{"message": "must provide a game name"}
end

GameService -> AuthService: getAuth(authToken)
AuthService -> db: Find AuthData by authToken

break Invalid authToken
AuthService --> GameService: null
GameService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "unauthorized Access"}
end

GameService -> gameDAO: createGame(gameName)
gameDAO -> db: Insert new GameData
gameDAO --> GameService: GameData

GameService --> GameHandler: CreateGameResponse(gameID)
GameHandler --> Server: {"gameID":" "}
Server --> Client: 200\n{"gameID":" "}
end

-------------------- JoinGame -----------------------

group #orange JoinGame #black
Client -> Server: [PUT] /game\nAuthorization: <authToken>\n{"gameID":X, "playerColor":"WHITE"}
Server -> GameHandler: Authorization + body
GameHandler -> GameService: joinGame(JoinGameRequest)

GameService -> GameService: check joinGameRequest.gameID()\ncheck joinGameRequest.playerColor()

break Missing fields
GameService -> Server: BadRequestException
Server -> Client: 400\n{"message": "bad request"}
end

GameService -> AuthService: getAuth(authToken)
AuthService -> db: Find AuthData by authToken

break Invalid authToken
AuthService --> GameService: null
GameService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "unauthorized"}
end

GameService -> gameDAO: getGame(gameID)
gameDAO -> db: Find GameData by gameID
gameDAO --> GameService: GameData

GameService -> GameService: checkColorAvailability(GameData, TeamColor)

break Color taken
GameService -> Server: GameTakenException
Server -> Client: 403\n{"message": "color already taken"}
end

GameService -> GameService: update GameData with username
GameService -> gameDAO: updateGame(updatedGame)
gameDAO -> db: Update GameData

GameService --> GameHandler: JoinGameResponse()
GameHandler --> Server: {}
Server --> Client: 200\n{}
end

-------------------- ListGames -----------------------

group #pink ListGames #black
Client -> Server: [GET] /game\nAuthorization: <authToken>
Server -> GameHandler: Authorization: <authToken>
GameHandler -> GameService: listGames(ListGamesRequest)

GameService -> AuthService: getAuth(authToken)
AuthService -> db: Find AuthData by authToken

break Invalid authToken
AuthService --> GameService: null
GameService -> Server: UnauthorizedAccessException
Server -> Client: 401\n{"message": "Unauthorized Access"}
end

GameService -> gameDAO: listGames()
gameDAO -> db: Return all GameData
gameDAO --> GameService: List<GamesObject>

GameService --> GameHandler: ListGamesResponse(games)
GameHandler --> Server: {"games":[...]}
Server --> Client: 200\n{"games":[...]}
end

-------------------- ClearDB -----------------------

group #lightcoral ClearDB #black
Client -> Server: [DELETE] /db
Server -> ClearHandler: ClearRequest()
ClearHandler -> ClearDbService: clear(ClearRequest)

ClearDbService -> authDAO: clear()
authDAO -> db: Delete all auth entries

ClearDbService -> userDAO: clear()
userDAO -> db: Delete all user entries

ClearDbService -> gameDAO: clear()
gameDAO -> db: Delete all game entries

ClearDbService --> ClearHandler: ClearResponse()
ClearHandler --> Server: {}
Server --> Client: 200\n{}
end
