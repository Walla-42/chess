package dataaccess;

import model.AuthData;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

public class MemoryAuthDAO implements AuthDAO{
    private final HashMap<String, AuthData> tokenAuthDatabase = new HashMap<>();
    private final HashMap<String, Set<String>> userAuthDatabase = new HashMap<>();

    /**
     * Stores an authToken for the user in the AuthDatabase
     *
     * @param authData AuthData object containing the AuthToken and the username of the user
     */
    public void createAuth(AuthData authData) {

        tokenAuthDatabase.put(authData.getAuthToken(), authData);

        userAuthDatabase.computeIfAbsent(authData.getUsername(), username -> new HashSet<>()).add(authData.getAuthToken());
    }

    /**
     * Deletes the users current authTokens from the database using the current authToken, logging them out.
     *
     * @param authToken authToken given by their current session.
     */
    public void deleteAuth(String authToken){

        AuthData data = tokenAuthDatabase.remove(authToken);
        if (data != null) {
            Set<String> tokens = userAuthDatabase.get(data.getUsername());

            if (tokens != null) {
                tokens.remove(authToken);

                if (tokens.isEmpty()) {
                    userAuthDatabase.remove(data.getUsername());
                }
            }
        }
    }

    /**
     * gets the AuthData object stored in the AuthDatabase
     *
     * @param authToken authToken given by users current session
     * @return AuthData obtained from the database including authToken and username
     */
    public AuthData getAuth(String authToken){
        return tokenAuthDatabase.get(authToken);
    }


    /**
     * Checks if the authToken generated is already in use on the server
     *
     * @param authToken authToken that is generated by generateAuthToken()
     * @return boolean, True if authToken is already in use, false otherwise.
     */
    public boolean tokenAlreadyExists(String authToken){
        return tokenAuthDatabase.containsKey(authToken);
    }

    /**
     * Method for clearing the AuthDatabase
     */
    public void clearDB(){
        tokenAuthDatabase.clear();
        userAuthDatabase.clear();
    }

}
