package dataaccess;

import dataaccess.exceptions.DataAccessException;
import model.AuthData;

import java.util.HashMap;
import java.util.Objects;

public class MemoryAuthDAO implements AuthDAO{
    private final HashMap<String, AuthData> tokenAuthDatabase = new HashMap<>();
    private final HashMap<String, AuthData> userAuthDatabase = new HashMap<>();

    public void createAuth(AuthData authData) throws Exception {

        if (userLoggedIn(authData.getUsername())){ // if user is already logged in, log them out .
            String oldAuthToken = userAuthDatabase.get(authData.getUsername()).getAuthToken();
            deleteAuth(oldAuthToken);
        }

        System.out.println("Saving token: " + authData.getAuthToken());


        tokenAuthDatabase.put(authData.getAuthToken(), authData);
        userAuthDatabase.put(authData.getUsername(), authData);
    }

    /**
     * Deletes the users current authToken from the database using the current authToken, logging them out.
     *
     * @param authToken authToken given by their current session.
     */
    public void deleteAuth(String authToken){
        System.out.println("Deleting authToken: " + authToken);

        String username = tokenAuthDatabase.get(authToken).getUsername();
        tokenAuthDatabase.remove(authToken);
        userAuthDatabase.remove(username);
    }

    /**
     * gets the AuthData object stored in the AuthDatabase
     *
     * @param authToken authToken given by users current session
     * @return AuthData obtained from the database including authToken and username
     */
    public AuthData getAuth(String authToken){
        System.out.println("Looking up token: " + authToken);

        return tokenAuthDatabase.get(authToken);
    }


    /**
     * checks if a user is already logged into the server
     *
     * @param username users username
     * @return boolean, True if logged in, false otherwise
     */
    private boolean userLoggedIn(String username){
        return userAuthDatabase.containsKey(username);
    }

    /**
     * Checks if the authToken generated is already in use on the server
     *
     * @param authToken authToken that is generated by generateAuthToken()
     * @return boolean, True if authToken is already in use, false otherwise.
     */
    public boolean tokenAlreadyExists(String authToken){
        return tokenAuthDatabase.containsKey(authToken);
    }

    /**
     * Function for clearing the AuthDatabase
     */
    public void clearDB(){
        tokenAuthDatabase.clear();
        userAuthDatabase.clear();
    }

    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MemoryAuthDAO that = (MemoryAuthDAO) o;
        return Objects.equals(tokenAuthDatabase, that.tokenAuthDatabase) && Objects.equals(userAuthDatabase, that.userAuthDatabase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tokenAuthDatabase, userAuthDatabase);
    }
}
